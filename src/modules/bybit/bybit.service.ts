import { Injectable } from '@nestjs/common';
import { WebSocket } from 'ws';
import { TelegramService } from '../telegram-bot/telegram.service';
import { ConfigService } from '@nestjs/config';

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö
interface LiquidationEvent {
  ts: number;
  data?: {
    s: string; // symbol
    S: 'Buy' | 'Sell'; // side
    v: string; // volume
    p: string; // price
  }[];
}

@Injectable()
export class BybitService {
  private readonly reciverTgId: string;
  private ws: WebSocket;

  constructor(
    private readonly configService: ConfigService,

    private readonly telegramSerivce: TelegramService,
  ) {
    this.reciverTgId = this.configService.getOrThrow('RECIVER_TELEGRAM_ID');
    this.setupWebSocket();
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è—Ö
  private setupWebSocket() {
    this.ws = new WebSocket('wss://stream.bybit.com/v5/public/linear');

    this.ws.on('open', async () => {
      console.log('WebSocket connected to Bybit');

      await this.telegramSerivce.sendMessage(
        this.reciverTgId,
        '–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–µ–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ Bybit...',
      );

      // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –¥–ª—è BTCUSDT
      this.ws.send(
        JSON.stringify({
          op: 'subscribe',
          args: [
            'allLiquidation.BTCUSDT',
            'allLiquidation.ETHUSDT',
            'allLiquidation.SOLUSDT',
            'allLiquidation.BNBUSDT',
          ],
        }),
      );
    });

    this.ws.on('message', async (data: Buffer) => {
      const message = JSON.parse(data.toString());

      console.log('Raw data: ', message);

      await this.handleLiquidation(message);
    });

    this.ws.on('error', (error) => {
      console.error('WebSocket error:', error);
    });

    this.ws.on('close', () => {
      console.log('WebSocket disconnected. Reconnecting...');
      setTimeout(() => this.setupWebSocket(), 5000); // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    });
  }

  private async handleLiquidation(event: LiquidationEvent) {
    if (!event?.data) return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
    event.data.map(async (d) => {
      const { S: side, s: symbolPair, p: price, v: volume } = d;
      console.log(
        `Liquidation: ${symbolPair} - SIDE: ${side} - VOLUME: ${volume} - PRICE: ${price} - POSITION: ${parseFloat(price) * parseFloat(volume)}`,
      );
      // ‚úÖ
      const symbol = symbolPair.split('USDT')[0];

      const timestamp = event.ts;
      const timeString = new Date(timestamp).toLocaleTimeString('ru-RU');

      const positionSize = Math.round(parseFloat(price) * parseFloat(volume));

      // –ü–æ—Ä–æ–≥ –≤ 1000$ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ–ª–∫–∏—Ö —Å–¥–µ–ª–æ–∫
      if (positionSize > 1000) {
        await this.telegramSerivce.sendMessage(
          this.reciverTgId,
          `<b>‚ö†Ô∏è (${timeString}) –õ–ò–ö–í–ò–î–ê–¶–ò–Ø ${side === 'Buy' ? '–õ–û–ù–ì' : '–®–û–†–¢'} ${side === 'Buy' ? 'üü¢' : 'üî¥'} ${symbol}:</b> <i>–Ω–∞ —Å—É–º–º—É ${positionSize}$</i>`,
        );
      }
    });
  }

  // TODO: –ú–µ—Ö–∞–Ω–∏–∫–∞ –¥–∞–ª—å—à–µ: –ï—Å–ª–∏ –ª–∏–∫–≤–∏–¥–Ω—É–ª–æ –®–û–†–¢ üî¥ - –≤—Å—Ç–∞—ë–º –≤ –õ–û–ù–ì üü¢ –Ω–∞ 10$ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç

  //   private async handleLiquidation(data: any) {
  //     const liquidation = data[0]; // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏
  //     const symbol = liquidation.symbol;
  //     const side = liquidation.side; // 'Buy' –∏–ª–∏ 'Sell'
  //     const qty = parseFloat(liquidation.qty); // –û–±—ä–µ–º –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏

  //     const liquidationThreshold = 10000; // –ü–æ—Ä–æ–≥ –¥–ª—è –∫—Ä—É–ø–Ω–æ–π –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏

  //     if (qty > liquidationThreshold) {
  //       console.log(`Large ${side} liquidation detected: ${qty} ${symbol}`);

  //       // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
  //       const orderSide = side === 'Buy' ? 'Sell' : 'Buy';
  //       await this.placeOrder(symbol, orderSide, qty);
  //     }
  //   }
}
