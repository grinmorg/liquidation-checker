import { Injectable } from '@nestjs/common';
import { WebSocket } from 'ws';
import { TelegramService } from '../telegram-bot/telegram.service';
import { ConfigService } from '@nestjs/config';
import { RestClientV5 } from 'bybit-api';

interface LiquidationEvent {
  ts: number;
  data?: {
    s: string; // symbol
    S: 'Buy' | 'Sell'; // side
    v: string; // volume
    p: string; // price
  }[];
}

@Injectable()
export class BybitService {
  private readonly reciverTgId: string;
  private readonly bybitClient: RestClientV5;
  private ws: WebSocket;

  // –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
  private liquidationCache: Record<
    string,
    { lastBuyLiquidation: number; lastSellLiquidation: number }
  > = {};

  constructor(
    private readonly configService: ConfigService,
    private readonly telegramService: TelegramService,
  ) {
    this.reciverTgId = this.configService.getOrThrow('RECIVER_TELEGRAM_ID');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit REST –∫–ª–∏–µ–Ω—Ç–∞
    this.bybitClient = new RestClientV5({
      baseUrl: 'https://api-demo.bybit.com',
      key: this.configService.getOrThrow('BYBIT_API_KEY_PUBLIC'),
      secret: this.configService.getOrThrow('BYBIT_API_KEY_SECRET'),
      testnet: false, // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ true –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏
    });

    this.setupWebSocket();
  }

  private async placeOrder(
    symbol: string,
    side: 'Buy' | 'Sell',
    usdAmount: number,
  ) {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
      if (!this.checkLiquidationTime(symbol, side)) {
        await this.telegramService.sendMessage(
          this.reciverTgId,
          `<b>‚è≥ –ü—Ä–æ–ø—É—Å–∫ –æ—Ä–¥–µ—Ä–∞:</b>\n` +
            `–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ ${symbol}\n` +
            `–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–∞—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è –º–µ–Ω–µ–µ 10 —Å–µ–∫ –Ω–∞–∑–∞–¥`,
        );
        return { skipped: true };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
      const currentPosition = await this.getCurrentPositions(symbol);

      // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
      if (currentPosition.side === side) {
        await this.telegramService.sendMessage(
          this.reciverTgId,
          `<b>‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –æ—Ä–¥–µ—Ä–∞:</b>\n` +
            `–£–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è ${side === 'Buy' ? '–õ–æ–Ω–≥' : '–®–æ—Ä—Ç'} –ø–æ ${symbol}\n` +
            `–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: ${currentPosition.size}`,
        );
        return { skipped: true };
      }

      // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä—ã–Ω–æ—á–Ω—É—é —Ü–µ–Ω—É
      const tickerResponse = await this.bybitClient.getTickers({
        category: 'linear',
        symbol,
      });

      if (!tickerResponse.result?.list?.length) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É');
      }

      const currentPrice = parseFloat(tickerResponse.result.list[0].lastPrice);

      // 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (qty) –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–º–º—ã –≤ USD
      const qty = usdAmount / currentPrice;
      const minQty = 0.001; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ –¥–ª—è BTCUSDT
      const roundedQty = Math.max(minQty, parseFloat(qty.toFixed(3)));

      // 3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
      const takeProfitPercent = 0.5;
      const stopLossPercent = 0.2;

      const takeProfitPrice =
        side === 'Buy'
          ? (currentPrice * (1 + takeProfitPercent / 100)).toFixed(2)
          : (currentPrice * (1 - takeProfitPercent / 100)).toFixed(2);

      const stopLossPrice =
        side === 'Buy'
          ? (currentPrice * (1 - stopLossPercent / 100)).toFixed(2)
          : (currentPrice * (1 + stopLossPercent / 100)).toFixed(2);

      // 4. –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
      const response = await this.bybitClient.submitOrder({
        category: 'linear',
        symbol,
        side,
        orderType: 'Market',
        qty: roundedQty.toString(),
        timeInForce: 'GTC',
        isLeverage: 1,
        takeProfit: takeProfitPrice,
        stopLoss: stopLossPrice,
        tpTriggerBy: 'MarkPrice',
        slTriggerBy: 'MarkPrice',
        positionIdx: 0,
      });

      if (response.retCode === 0) {
        console.log('–û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â—ë–Ω:', response);

        // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞ –≤ Telegram
        await this.telegramService.sendMessage(
          this.reciverTgId,
          `<b>‚ö° –û—Ä–¥–µ—Ä –∏—Å–ø–æ–ª–Ω–µ–Ω</b>\n` +
            `‚ñ∏ –°–∏–º–≤–æ–ª: <b>${symbol}</b>\n` +
            `‚ñ∏ –¢–∏–ø: <b>${side === 'Buy' ? '–õ–æ–Ω–≥' : '–®–æ—Ä—Ç'}</b>\n` +
            `‚ñ∏ –û–±—ä–µ–º: <b>${roundedQty.toFixed(4)} ${symbol.replace('USDT', '')}</b>\n` +
            `‚ñ∏ –°—É–º–º–∞: <b>${usdAmount}$</b>\n` +
            `‚ñ∏ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <b>${currentPrice.toFixed(2)}</b>\n` +
            `‚ñ∏ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: <b>${takeProfitPrice} (+${takeProfitPercent}%)</b>\n` +
            `‚ñ∏ –°—Ç–æ–ø-–ª–æ—Å—Å: <b>${stopLossPrice} (-${stopLossPercent}%)</b>`,
        );
      }

      return response;
    } catch (error) {
      const errorMsg = error.response?.data?.retMsg || error.message;
      await this.telegramService.sendMessage(
        this.reciverTgId,
        `<b>‚ùå –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞</b>\n` +
          `‚ñ∏ –°–∏–º–≤–æ–ª: ${symbol}\n` +
          `‚ñ∏ –ü—Ä–∏—á–∏–Ω–∞: ${errorMsg}`,
      );
      throw error;
    }
  }

  private async handleLiquidation(event: LiquidationEvent) {
    if (!event?.data) return;

    for (const d of event.data) {
      const { S: side, s: symbolPair, p: price, v: volume } = d;
      const positionSize = parseFloat(price) * parseFloat(volume);

      console.log(
        `Liquidation: ${symbolPair} - SIDE: ${side} - VOLUME: ${volume} - PRICE: ${price} - POSITION: ${positionSize}`,
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
      this.updateLiquidationCache(symbolPair, side);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
      const canTrade = this.checkLiquidationTime(symbolPair, side);
      if (!canTrade) {
        console.log(
          `–ü—Ä–æ–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è ${symbolPair} - —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–∞—è –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è`,
        );
        continue;
      }

      const timestamp = event.ts;
      const timeString = new Date(timestamp).toLocaleTimeString('ru-RU');

      // –ü–æ—Ä–æ–≥ –≤ 10000$ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ–ª–∫–∏—Ö —Å–¥–µ–ª–æ–∫
      if (positionSize > 10000) {
        const tradeSide = side === 'Buy' ? 'Sell' : 'Buy';
        const sideEmoji = side === 'Buy' ? 'üü¢' : 'üî¥';
        const sideText = side === 'Buy' ? '–õ–û–ù–ì' : '–®–û–†–¢';

        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞
          await this.telegramService.sendMessage(
            this.reciverTgId,
            `<b>‚ö†Ô∏è (${timeString}) –õ–ò–ö–í–ò–î–ê–¶–ò–Ø ${sideText} ${sideEmoji} ${symbolPair}:</b>\n` +
              `<i>–Ω–∞ —Å—É–º–º—É ${Math.round(positionSize)}$</i>\n`,
          );

          // –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä
          await this.placeOrder(symbolPair, tradeSide, 1000); // –æ—Ä–¥–µ—Ä –Ω–∞ 1000$
        } catch (error) {
          await this.telegramService.sendMessage(
            this.reciverTgId,
            `<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞:</b>\n` +
              `${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
          );
        }
      }
    }
  }

  //  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
  private updateLiquidationCache(symbol: string, side: 'Buy' | 'Sell') {
    if (!this.liquidationCache[symbol]) {
      this.liquidationCache[symbol] = {
        lastBuyLiquidation: 0,
        lastSellLiquidation: 0,
      };
    }

    const now = Date.now();
    if (side === 'Buy') {
      this.liquidationCache[symbol].lastBuyLiquidation = now;
    } else {
      this.liquidationCache[symbol].lastSellLiquidation = now;
    }

    // –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    setTimeout(() => {
      if (
        now - this.liquidationCache[symbol].lastBuyLiquidation > 30000 &&
        now - this.liquidationCache[symbol].lastSellLiquidation > 30000
      ) {
        delete this.liquidationCache[symbol];
      }
    }, 30000);
  }

  //  –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
  private checkLiquidationTime(symbol: string, side: 'Buy' | 'Sell'): boolean {
    const cache = this.liquidationCache[symbol];
    if (!cache) return true;

    const now = Date.now();
    const lastTime =
      side === 'Buy'
        ? cache.lastSellLiquidation // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        : cache.lastBuyLiquidation;

    return now - lastTime > 10000; // 10 —Å–µ–∫—É–Ω–¥
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
  private async getCurrentPositions(symbol: string): Promise<{
    side: 'Buy' | 'Sell' | 'None';
    size: number;
  }> {
    try {
      const response = await this.bybitClient.getPositionInfo({
        category: 'linear',
        symbol: symbol,
      });

      if (response.retCode !== 0 || !response.result?.list?.length) {
        return { side: 'None', size: 0 };
      }

      const position = response.result.list[0];
      const size = parseFloat(position.size);

      if (size === 0) {
        return { side: 'None', size: 0 };
      }

      return {
        side: position.side === 'Buy' ? 'Buy' : 'Sell',
        size: size,
      };
    } catch (error) {
      console.error('Error getting positions:', error);
      return { side: 'None', size: 0 };
    }
  }

  private async setupWebSocket() {
    this.ws = new WebSocket('wss://stream.bybit.com/v5/public/linear');

    this.ws.on('open', async () => {
      console.log('WebSocket connected to Bybit');

      this.ws.send(
        JSON.stringify({
          op: 'subscribe',
          args: [
            'allLiquidation.BTCUSDT',
            'allLiquidation.ETHUSDT',
            'allLiquidation.SOLUSDT',
            'allLiquidation.BNBUSDT',
          ],
        }),
      );
    });

    this.ws.on('message', async (data: Buffer) => {
      const message = JSON.parse(data.toString());
      console.log('Raw data: ', message);
      await this.handleLiquidation(message);
    });

    this.ws.on('error', (error) => {
      console.error('WebSocket error:', error);
    });

    this.ws.on('close', () => {
      console.log('WebSocket disconnected. Reconnecting...');
      setTimeout(() => this.setupWebSocket(), 5000);
    });
  }
}
