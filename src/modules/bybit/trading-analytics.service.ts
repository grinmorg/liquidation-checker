// src/trading/trading-analytics.service.ts
import { Injectable } from '@nestjs/common';
import { TelegramService } from '../telegram-bot/telegram.service';
import { ConfigService } from '@nestjs/config';

export interface TradePosition {
  symbol: string;
  side: 'Buy' | 'Sell';
  entryPrice: number;
  exitPrice: number;
  pnl: number;
  timestamp: number;
  closedType?: 'TP' | 'SL' | 'Manual';
}

@Injectable()
export class TradingAnalyticsService {
  private dailyStats = this.initDailyStats();

  constructor(
    private readonly telegramService: TelegramService,

    private readonly configService: ConfigService,
  ) {}

  public initDailyStats() {
    return {
      date: new Date().toISOString().split('T')[0],
      totalOrders: 0,
      profitable: 0,
      loss: 0,
      totalProfit: 0,
      positions: [] as TradePosition[],
    };
  }

  public async processClosedPosition(position: TradePosition) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.dailyStats.totalOrders++;
    this.dailyStats.totalProfit += position.pnl;

    if (position.pnl >= 0) {
      this.dailyStats.profitable++;
    } else {
      this.dailyStats.loss++;
    }

    this.dailyStats.positions.push(position);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await this.sendPositionNotification(position);
  }

  private async sendPositionNotification(position: TradePosition) {
    const isProfit = position.pnl >= 0;
    const typeMap = {
      TP: { emoji: 'üí∞', text: '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç' },
      SL: { emoji: '‚ö†Ô∏è', text: '–°—Ç–æ–ø-–ª–æ—Å—Å' },
      Manual: { emoji: '‚úã', text: '–í—Ä—É—á–Ω—É—é' },
    };

    const typeInfo = typeMap[position.closedType] || typeMap.Manual;

    const message = this.buildPositionMessage(position, typeInfo, isProfit);

    const chatId = this.configService.getOrThrow('RECIVER_TELEGRAM_ID');
    await this.telegramService.sendMessage(chatId, message);
  }

  private buildPositionMessage(
    position: TradePosition,
    typeInfo: any,
    isProfit: boolean,
  ) {
    return (
      `<b>${typeInfo.emoji} ${typeInfo.text}</b>\n` +
      `‚ñ∏ –°–∏–º–≤–æ–ª: <b>${position.symbol}</b>\n` +
      `‚ñ∏ –°—Ç–æ—Ä–æ–Ω–∞: <b>${position.side === 'Buy' ? '–õ–æ–Ω–≥' : '–®–æ—Ä—Ç'}</b>\n` +
      `‚ñ∏ –í—Ö–æ–¥: <b>${position.entryPrice.toFixed(2)}</b>\n` +
      `‚ñ∏ –í—ã—Ö–æ–¥: <b>${position.exitPrice.toFixed(2)}</b>\n` +
      `‚ñ∏ PnL: <b>${position.pnl.toFixed(2)} $</b> ${isProfit ? 'üü¢' : 'üî¥'}\n\n` +
      this.getDailyStats()
    );
  }

  public getDailyStats(): string {
    const winRate =
      this.dailyStats.totalOrders > 0
        ? (
            (this.dailyStats.profitable / this.dailyStats.totalOrders) *
            100
          ).toFixed(2)
        : '0.00';

    return (
      `<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${this.dailyStats.date}</b>\n` +
      `‚ñ∏ –û—Ä–¥–µ—Ä–æ–≤: <b>${this.dailyStats.totalOrders}</b>\n` +
      `‚ñ∏ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: <b>${this.dailyStats.profitable}</b>\n` +
      `‚ñ∏ –£–±—ã—Ç–æ—á–Ω—ã—Ö: <b>${this.dailyStats.loss}</b>\n` +
      `‚ñ∏ –í–∏–Ω—Ä–µ–π—Ç: <b>${winRate}%</b>\n` +
      `‚ñ∏ –û–±—â–∏–π PnL: <b>${this.dailyStats.totalProfit.toFixed(2)} $</b>`
    );
  }
}
